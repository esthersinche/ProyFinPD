package View;

import Controler.*;
import DAO.*;
import Model.*;
import java.awt.CardLayout;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class caja_ventas extends javax.swing.JPanel {

    private List<DetVenta> listaDeDetalles;
    DefaultTableModel m = new DefaultTableModel();
    DefaultTableModel n = new DefaultTableModel();
    private String idVen;

    public caja_ventas() {
        initComponents();
        mostrarCabecera1();
        mostrarCabecera2();
        obtenerIdVenta();
        listaDeDetalles = new ArrayList<>();

        txtCantidad.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    calcularPrecio();
                }
            }
        });

    }

    public void obtenerIdVenta() {
        // Generate a new ID or fetch it from DB
        this.idVen = UUID.randomUUID().toString().substring(0, 5);
    }

    public void mostrarCabecera1() {
        m.addColumn("id");
        m.addColumn("Titulo");
        m.addColumn("Precio");
        m.addColumn("Autor");
        m.addColumn("Editorial");
        m.addColumn("Genero");
        m.addColumn("Idioma");
        tblLibros.setModel(m);
    }

    public void mostrarCabecera2() {
        n.addColumn("Id_Libro");
        n.addColumn("Cantidad");
        n.addColumn("Precio");
        n.addColumn("Subtotal");
        tblVenta.setModel(n);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCliente = new javax.swing.JTabbedPane();
        pnlListarLibros = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLibros = new javax.swing.JTable();
        btnListar = new javax.swing.JButton();
        pnlRegistroVentaCli = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVenta = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        txtCodLib = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnVender = new javax.swing.JButton();
        lblCantidad = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        pnlCliente.setBackground(new java.awt.Color(187, 142, 211));
        pnlCliente.setForeground(new java.awt.Color(255, 255, 255));

        pnlListarLibros.setBackground(new java.awt.Color(255, 255, 255));

        tblLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLibros);

        btnListar.setBackground(new java.awt.Color(187, 142, 211));
        btnListar.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        btnListar.setForeground(new java.awt.Color(255, 255, 255));
        btnListar.setText("Listar Libros");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListarLibrosLayout = new javax.swing.GroupLayout(pnlListarLibros);
        pnlListarLibros.setLayout(pnlListarLibrosLayout);
        pnlListarLibrosLayout.setHorizontalGroup(
            pnlListarLibrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListarLibrosLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(pnlListarLibrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );
        pnlListarLibrosLayout.setVerticalGroup(
            pnlListarLibrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListarLibrosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        pnlCliente.addTab("Listar Libros", pnlListarLibros);

        pnlRegistroVentaCli.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(new java.awt.Font("Eras Bold ITC", 1, 18)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("DNI del cliente:");

        txtDni.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        tblVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblVenta);

        jLabel16.setFont(new java.awt.Font("Eras Bold ITC", 1, 18)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Codigo del libro:");

        txtCodLib.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnAdd.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        btnAdd.setText("AÃ±adir");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnVender.setBackground(new java.awt.Color(187, 142, 211));
        btnVender.setFont(new java.awt.Font("Eras Bold ITC", 0, 18)); // NOI18N
        btnVender.setText("Vender");
        btnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVenderActionPerformed(evt);
            }
        });

        lblCantidad.setFont(new java.awt.Font("Eras Bold ITC", 1, 18)); // NOI18N
        lblCantidad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantidad.setText("Cantidad:");

        lblPrecio.setFont(new java.awt.Font("Eras Bold ITC", 1, 18)); // NOI18N
        lblPrecio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPrecio.setText("Precio:");

        txtPrecio.setEditable(false);
        txtPrecio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout pnlRegistroVentaCliLayout = new javax.swing.GroupLayout(pnlRegistroVentaCli);
        pnlRegistroVentaCli.setLayout(pnlRegistroVentaCliLayout);
        pnlRegistroVentaCliLayout.setHorizontalGroup(
            pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRegistroVentaCliLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVender, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(265, 265, 265))
            .addGroup(pnlRegistroVentaCliLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlRegistroVentaCliLayout.createSequentialGroup()
                        .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlRegistroVentaCliLayout.createSequentialGroup()
                                .addComponent(txtCodLib, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(112, 112, 112)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pnlRegistroVentaCliLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel15, jLabel16, lblCantidad, lblPrecio});

        pnlRegistroVentaCliLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCodLib, txtDni, txtPrecio});

        pnlRegistroVentaCliLayout.setVerticalGroup(
            pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistroVentaCliLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCodLib, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd))
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCantidad))
                .addGap(12, 12, 12)
                .addGroup(pnlRegistroVentaCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVender)
                .addGap(17, 17, 17))
        );

        pnlRegistroVentaCliLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel15, jLabel16, lblCantidad, lblPrecio});

        pnlRegistroVentaCliLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCodLib, txtPrecio});

        pnlCliente.addTab("Registrar Venta", pnlRegistroVentaCli);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(pnlCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCliente)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVenderActionPerformed
        // Crear instancias de los controladores necesarios
        CVentas controladorVentas = new CVentas();
        CCliente controladorClientes = new CCliente(); // Controlador para manejar clientes

        try {

            // Validar el DNI
            String dniClienteStr = txtDni.getText().trim();
            if (dniClienteStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese el DNI del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar que el DNI sea un nÃºmero
            int dniCliente;
            try {
                dniCliente = Integer.parseInt(dniClienteStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El DNI debe ser un nÃºmero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Buscar cliente
            Cliente clienteSeleccionado = controladorClientes.obtenerClientePorDni(dniCliente);
            if (clienteSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "No se encontrÃ³ un cliente con el DNI proporcionado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar lista de detalles
            if (listaDeDetalles == null || listaDeDetalles.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay productos en la lista de venta.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Procesar la venta y obtener el ID generado
            String idVentaGenerado = controladorVentas.procesarVenta(clienteSeleccionado, listaDeDetalles);

            // Mostrar mensaje de Ã©xito
            JOptionPane.showMessageDialog(this, "Venta registrada con Ã©xito. ID de la venta: " + idVentaGenerado);

            // Mostrar el panel con el resumen de la venta usando el ID generado
            mostrarResumenVenta(idVentaGenerado);

            // Limpiar formulario de venta
            limpiarFormularioVenta();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al registrar la venta: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVenderActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String codigoLibro = txtCodLib.getText().trim();
        int cantidad;
        double precioUnitario;

        // Validar que los campos no estÃ©n vacÃ­os
        if (codigoLibro.isEmpty() || txtCantidad.getText().trim().isEmpty() || txtPrecio.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            cantidad = Integer.parseInt(txtCantidad.getText().trim());
            precioUnitario = Double.parseDouble(txtPrecio.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Cantidad y precio deben ser valores numÃ©ricos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crear un nuevo detalle de venta usando la clase DetVenta
        DetVenta detalle = new DetVenta();
        detalle.setIdDetVenta(UUID.randomUUID().toString().substring(0, 5));
        detalle.setIdVenta(idVen);
        detalle.setIdLibro(codigoLibro);
        detalle.setCantDetVenta(cantidad);
        detalle.setPrecioUnitDetVenta(precioUnitario);

        // AÃ±adirlo a la lista de detalles
        listaDeDetalles.add(detalle);

        // Actualizar la tabla
        DefaultTableModel modelo = (DefaultTableModel) tblVenta.getModel();
        modelo.addRow(new Object[]{codigoLibro, cantidad, precioUnitario, detalle.getCantDetVenta() * detalle.getPrecioUnitDetVenta()});

        // Limpiar los campos
        txtCodLib.setText("");
        txtCantidad.setText("");
        txtPrecio.setText(""); // Limpiar el precio
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        try {
            LibroDAO ld = new LibroDAO();
            List<Libro> vl = ld.obtenerTodos();
            IdiomaDAO idd = new IdiomaDAO();
            GeneroDAO gd = new GeneroDAO();
            AutorDAO ad = new AutorDAO();
            EditorialDAO ed = new EditorialDAO();
            m.setRowCount(0);
            for (Libro libro : vl) {
                Idioma idioma = idd.obtenerPorId(libro.getIdIdioma());
                Genero genero = gd.obtenerPorId(libro.getIdGen());
                Autor autor = ad.obtenerPorId(libro.getIdAutor());
                Editorial editorial = ed.obtenerPorId(libro.getIdEdito());

                Object[] data = {
                    libro.getIdLibro(),
                    libro.getTitulo(),
                    libro.getPrecio(),
                    autor.getNomAutor() + " " + autor.getApeAutor(),
                    editorial.getNomEdito(),
                    genero.getGenero(),
                    idioma.getIdioma(),};
                m.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnListarActionPerformed

    private void calcularPrecio() {
        String codigoLibro = txtCodLib.getText().trim();
        String cantidadStr = txtCantidad.getText().trim();

        // Validar que el cÃ³digo del libro y la cantidad no estÃ©n vacÃ­os
        if (codigoLibro.isEmpty() || cantidadStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el cÃ³digo del libro y la cantidad.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            // Obtener el precio del libro desde la base de datos
            double precioUnitario = obtenerPrecioLibro(codigoLibro);

            // Actualizar el campo de precio
            txtPrecio.setText(String.valueOf(precioUnitario));

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un valor numÃ©rico.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el precio del libro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private double obtenerPrecioLibro(String codigoLibro) throws SQLException {
        // LÃ³gica para obtener el precio del libro desde la base de datos usando el cÃ³digo del libro
        // AquÃ­ puedes hacer una consulta SQL para obtener el precio basado en el cÃ³digo
        // Devolver el precio obtenido
        LibroDAO ld = new LibroDAO();
        Libro libro = ld.obtenerPorId(codigoLibro);
        if (libro != null) {
            return libro.getPrecio();
        } else {
            throw new SQLException("Libro no encontrado con el cÃ³digo proporcionado.");
        }
    }

    private void mostrarResumenVenta(String idVenta) {
        JPanel pnlCajero = (JPanel) this.getParent();
        caja_resumenVentas resumen = new caja_resumenVentas(idVenta);
        pnlCajero.add(resumen, "ResumenVenta");
        CardLayout cardLayout = (CardLayout) pnlCajero.getLayout();
        cardLayout.show(pnlCajero, "ResumenVenta");
    }

    private void limpiarFormularioVenta() {
        // Limpiar los campos de texto y la tabla
        txtDni.setText("");
        txtPrecio.setText("");
        txtCantidad.setText("");
        txtCodLib.setText("");
        idVen = UUID.randomUUID().toString().substring(0, 5);
        listaDeDetalles.clear();
        DefaultTableModel modelo = (DefaultTableModel) tblVenta.getModel();
        modelo.setRowCount(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnVender;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCantidad;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JTabbedPane pnlCliente;
    private javax.swing.JPanel pnlListarLibros;
    private javax.swing.JPanel pnlRegistroVentaCli;
    private javax.swing.JTable tblLibros;
    private javax.swing.JTable tblVenta;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCodLib;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

}
